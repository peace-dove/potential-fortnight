//use ListNode to keep the number
//K_Reverse problem which means input some numbers and reverse every k numbers then output it

typedef int ElementType;
typedef struct ListNode *PtrToNode;
struct ListNode
{
    ElementType Data;
    PtrToNode   Next;
};
typedef PtrToNode List;

struct ListNode *createlist()
{
    List head=NULL, tail=NULL;
    int t;
    scanf("%d",&t);
    while(t!=-1)
    {
        List temp=(List)malloc(sizeof(List));
        temp->Data=t;
        temp->Next=NULL;
        if(tail==NULL)
            head=tail=temp;
        else
        {
            tail->Next = temp;
            tail=temp;
        }
        scanf("%d",&t);
    }
    return head;
}

void printlist(struct ListNode *head)
{
    List p=head;
    while(p)
    {
        printf("%d ",p->Data);
        p=p->Next;
    }
    printf("\n");
}


struct ListNode *Reserve(struct ListNode *L,int k)
{
    List tail;
    tail=L;
    while(--k)
        tail=tail->Next;
    List s,p;
    s=L;
    p=s->Next;
    while(s&&p&&s!=tail)
    {
        s->Next=tail->Next;
        tail->Next=s;
        s=p;
        p=s->Next;
    }
    return tail;
}

void K_Reverse(struct ListNode * L,int k )
{
    List l1;
    l1=(List)malloc(sizeof(List));
    l1->Data=L->Data;
    l1->Next=L->Next;
    L->Next=NULL;

    int m,i;
    List tail,head,p;
    if(k<=1)
        return;
    tail=head=l1;
    for(i=0; i<k-1&&tail->Next; i++)
        tail=tail->Next;
    p=tail->Next;
    if(i!=k-1)
        return;
    else
        head=Reserve(l1,k);
    List s=l1;

    tail=p;
    while(tail)
    {
        int cnt=0;
        for(i=1; i%k!=0&&tail->Next; i++)
        {
            tail=tail->Next;
            cnt++;
        }
        if(cnt==k-1)
        {
            s->Next=Reserve(p,k);
            s=p;
            p=p->Next;
            tail=p;
        }
    }
    L->Data=head->Data;
    L->Next=head->Next;
}

int main()
{
    struct ListNode *L;
    L=createlist();
    int k;
    scanf("%d",&k);
    K_Reverse(L,k);
    printlist(L);

    return 0;
}
