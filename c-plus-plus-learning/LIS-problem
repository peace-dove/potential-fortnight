
/*
int s[1001],d[1001];
int main()
{
    int n;
    cin>>n;
    for(int i=1; i<=n; ++i)
    {
        cin>>s[i];
        d[i]=0;
    }
    d[1]=0;
    for(int i=2; i<=n; ++i)
    {
        for(int j=1; j<i; ++j)

            if(s[i]>s[j])
                d[i]=max(d[i],d[j]);
        d[i]++;
    }


    cout<<*max_element(d+1,d+n+1);
    return 0;
}


int a[51];
int solve(int i,int j)//将前j个物品放入容量为i的背包的种类
{
    if(i==0)
        return 1;
    if(j<=0)
        return 0;
    return solve(i,j-1)+((i-a[j]>=0)?solve(i-a[j],j-1):0);
}

int main()
{
    int n;
    cin>>n;
    for(int i=1; i<=n; ++i)
        cin>>a[i];

    cout<<solve(70,n);
}*/
#include <bits/stdc++.h>

using namespace std;
int dp(int i,int j);

int h[1001][1001];
int d[1001][1001];
int row,column;

int main()
{

    cin>>row>>column;

    memset(h,10001,sizeof(h));
    memset(d,-1,sizeof(d));

    for(int i=1; i<=row; ++i)
        for(int j=1; j<=column; ++j)
            cin>>h[i][j];

    int p=-1;
    for(int i=1; i<=row; ++i)
        for(int j=1; j<=column; ++j)
        {
            int dpresult=dp(i,j);
            if(p<dpresult)
                p=dpresult;
        }

    cout<<p<<endl;
    return 0;
}

int dp(int i,int j)
{
    if(d[i][j]!=-1)
        return d[i][j];

    if((h[i][j]<=h[i][j-1])&&(h[i][j]<=h[i][j+1])&&(h[i][j]<=h[i-1][j])&&(h[i][j]<=h[i+1][j]))
        return d[i][j]=1;

    int maxlen=0;

    if(h[i][j]>h[i][j-1])
    {
        int left=dp(i,j-1);
        if(maxlen<left+1) maxlen=left+1;
    }
    if(h[i][j]>h[i][j+1])
    {
        int right=dp(i,j+1);
        if(maxlen<right+1) maxlen=right+1;
    }
    if(h[i][j]>h[i-1][j])
    {
        int up=dp(i-1,j);
        if(maxlen<up+1) maxlen=up+1;
    }
    if(h[i][j]>h[i+1][j])
    {
        int down=dp(i+1,j);
        if(maxlen<down+1) maxlen=down+1;
    }

    return d[i][j]=maxlen;
}
